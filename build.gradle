buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'mysql:mysql-connector-java:5.1.36'
    }
}

plugins {
    id 'java'
    id 'maven'
    id 'war'
    id 'org.liquibase.gradle' version '1.2.1'
}

group = 'ca.kolupaev.toptal.caloriecounter'
version = '1.0-SNAPSHOT'
description = 'Calorie counter'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

ext {
    springVersion = '4.3.2.RELEASE'
    springSecurityVersion = '4.1.3.RELEASE'
    hibernateVersion = '5.1.1.Final'
    javaxValidatorVersion = '1.1.0.Final'
    hibernateValidatorVersion = '5.2.4.Final'
    jacksonVersion = '2.5.3'
    mysqlVersion = '5.1.9'
    liquibaseVersion = '3.3.2'
    tilesVersion = '3.0.5'
    servletVersion = '3.0-alpha-1'
    jstlVersion = '1.2'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {

    // Spring
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-web', version: springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
    compile group: 'org.springframework', name: 'spring-jdbc', version: springVersion
    compile group: 'org.springframework', name: 'spring-tx', version: springVersion
    compile group: 'org.springframework', name: 'spring-orm', version: springVersion

    // Spring Security
    compile group: 'org.springframework.security', name: 'spring-security-web', version: springSecurityVersion
    compile group: 'org.springframework.security', name: 'spring-security-config', version: springSecurityVersion
    compile group: 'org.springframework.security', name: 'spring-security-taglibs', version: springSecurityVersion

    // Hibernate
    compile group: 'org.hibernate', name: 'hibernate-core', version: hibernateVersion

    // JSR303 Validation
    compile group: 'javax.validation', name: 'validation-api', version: javaxValidatorVersion
    compile group: 'org.hibernate', name: 'hibernate-validator', version: hibernateValidatorVersion

    // JSON Mapping
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate5', version: '2.8.2'

    // Database
    compile group: 'mysql', name: 'mysql-connector-java', version: mysqlVersion

    // Utils
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.4'

    providedCompile group: 'javax.servlet', name: 'servlet-api', version: servletVersion
    providedCompile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.1'
    providedCompile group: 'org.apache.tomcat', name: 'tomcat-catalina', version: '7.0.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

processResources {
    filesMatching('**/*.properties') {
        filter {
            it.replace('${db.driverClass}', 'com.mysql.jdbc.Driver')
                .replace('${db.connectionURL}', 'jdbc:mysql://192.168.99.100:3306/springsecurity?createDatabaseIfNotExist=true')
                .replace('${db.username}', 'root')
                .replace('${db.password}', 'secret')
        }
    }
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/db.changelog.xml'
            url 'jdbc:mysql://192.168.99.100:3306/springsecurity?createDatabaseIfNotExist=true'
            username 'root'
            password 'secret'
        }
    }

    runList = 'main'
}

war {
    filesMatching('**/*.xml') {
        filter {
            it.replace('${db.driverClass}', 'com.mysql.jdbc.Driver')
                .replace('${db.connectionURL}', 'jdbc:mysql://192.168.99.100:3306/springsecurity?createDatabaseIfNotExist=true')
                .replace('${db.username}', 'root')
                .replace('${db.password}', 'secret')
        }
    }
}

task explodedWar(type: Copy) {
    from zipTree(war.archivePath)
    into "${buildDir}/exploded"
}

build.dependsOn update
build.dependsOn explodedWar